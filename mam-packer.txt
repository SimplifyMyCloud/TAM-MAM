# backend-init.sh
#!/bin/bash
set -e

# System updates
apt-get update
apt-get upgrade -y

# Install required packages
apt-get install -y postgresql-client redis-tools ffmpeg golang-1.20 nginx

# Create application user
useradd -m -s /bin/bash mam

# Create application directories
mkdir -p /opt/mam
mkdir -p /var/lib/mam/{media,temp}
chown -R mam:mam /opt/mam /var/lib/mam

# Install CloudWatch agent
wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
dpkg -i amazon-cloudwatch-agent.deb
rm amazon-cloudwatch-agent.deb

# Setup application
cat > /opt/mam/config.yaml << EOF
database:
  host: ${db_host}
  name: ${db_name}
  user: ${db_user}
  password: ${db_password}

redis:
  host: ${redis_host}
  port: 6379

storage:
  path: /var/lib/mam/media
  temp_path: /var/lib/mam/temp
EOF

# Create systemd service
cat > /etc/systemd/system/mam.service << EOF
[Unit]
Description=MAM Backend Service
After=network.target

[Service]
Type=simple
User=mam
WorkingDirectory=/opt/mam
ExecStart=/opt/mam/mam-backend
Restart=always
Environment=MAM_CONFIG=/opt/mam/config.yaml

[Install]
WantedBy=multi-user.target
EOF

# frontend-init.sh
#!/bin/bash
set -e

# System updates
apt-get update
apt-get upgrade -y

# Install Node.js
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt-get install -y nodejs nginx

# Create application directory
mkdir -p /opt/mam-frontend

# Setup Nginx
cat > /etc/nginx/sites-available/mam-frontend << EOF
server {
    listen 80;
    server_name _;
    root /opt/mam-frontend/build;

    location / {
        try_files \$uri \$uri/ /index.html;
    }

    location /api {
        proxy_pass ${backend_url};
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }
}
EOF

ln -s /etc/nginx/sites-available/mam-frontend /etc/nginx/sites-enabled/
rm /etc/nginx/sites-enabled/default

# Install PM2
npm install -g pm2

# packer/backend.pkr.hcl
packer {
  required_plugins {
    amazon = {
      source  = "github.com/hashicorp/amazon"
      version = "~> 1.0"
    }
  }
}

variable "aws_region" {
  type    = string
  default = "us-west-2"
}

variable "environment" {
  type    = string
  default = "staging"
}

source "amazon-ebs" "backend" {
  ami_name      = "mam-backend-${var.environment}-{{timestamp}}"
  instance_type = "t3.micro"
  region        = var.aws_region

  source_ami_filter {
    filters = {
      name                = "ubuntu/images/*ubuntu-jammy-22.04-amd64-server-*"
      root-device-type    = "ebs"
      virtualization-type = "hvm"
    }
    most_recent = true
    owners      = ["099720109477"] # Canonical
  }

  ssh_username = "ubuntu"

  tags = {
    Environment = var.environment
    Component   = "MAM Backend"
  }
}

build {
  sources = ["source.amazon-ebs.backend"]

  provisioner "file" {
    source      = "../backend-init.sh"
    destination = "/tmp/init.sh"
  }

  provisioner "file" {
    source      = "../mam-backend"
    destination = "/tmp/mam-backend"
  }

  provisioner "shell" {
    inline = [
      "sudo chmod +x /tmp/init.sh",
      "sudo mv /tmp/mam-backend /opt/mam/",
      "sudo chmod +x /opt/mam/mam-backend",
      "sudo /tmp/init.sh"
    ]
  }
}

# packer/frontend.pkr.hcl
packer {
  required_plugins {
    amazon = {
      source  = "github.com/hashicorp/amazon"
      version = "~> 1.0"
    }
  }
}

source "amazon-ebs" "frontend" {
  ami_name      = "mam-frontend-${var.environment}-{{timestamp}}"
  instance_type = "t3.micro"
  region        = var.aws_region

  source_ami_filter {
    filters = {
      name                = "ubuntu/images/*ubuntu-jammy-22.04-amd64-server-*"
      root-device-type    = "ebs"
      virtualization-type = "hvm"
    }
    most_recent = true
    owners      = ["099720109477"] # Canonical
  }

  ssh_username = "ubuntu"

  tags = {
    Environment = var.environment
    Component   = "MAM Frontend"
  }
}

build {
  sources = ["source.amazon-ebs.frontend"]

  provisioner "file" {
    source      = "../frontend-init.sh"
    destination = "/tmp/init.sh"
  }

  provisioner "file" {
    source      = "../build"
    destination = "/tmp/build"
  }

  provisioner "shell" {
    inline = [
      "sudo chmod +x /tmp/init.sh",
      "sudo mv /tmp/build /opt/mam-frontend/",
      "sudo /tmp/init.sh"
    ]
  }
}

# build.sh
#!/bin/bash
set -e

# Build backend AMI
cd packer
packer init backend.pkr.hcl
packer build \
  -var "environment=${ENVIRONMENT}" \
  -var "aws_region=${AWS_REGION}" \
  backend.pkr.hcl

# Build frontend AMI
packer init frontend.pkr.hcl
packer build \
  -var "environment=${ENVIRONMENT}" \
  -var "aws_region=${AWS_REGION}" \
  frontend.pkr.hcl
